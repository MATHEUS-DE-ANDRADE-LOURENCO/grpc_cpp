# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import notas_pb2 as notas__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in notas_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GerenciadorNotasStub(object):
    """==============================
    Definição do serviço
    ==============================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AdicionarNota = channel.unary_unary(
                '/gerencia_notas.GerenciadorNotas/AdicionarNota',
                request_serializer=notas__pb2.AdicionaNotaRequest.SerializeToString,
                response_deserializer=notas__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.AlterarNota = channel.unary_unary(
                '/gerencia_notas.GerenciadorNotas/AlterarNota',
                request_serializer=notas__pb2.AdicionaNotaRequest.SerializeToString,
                response_deserializer=notas__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ConsultarNota = channel.unary_unary(
                '/gerencia_notas.GerenciadorNotas/ConsultarNota',
                request_serializer=notas__pb2.AlunoDisciplinaRequest.SerializeToString,
                response_deserializer=notas__pb2.ConsultaNotaResponse.FromString,
                _registered_method=True)
        self.CalcularMedia = channel.unary_unary(
                '/gerencia_notas.GerenciadorNotas/CalcularMedia',
                request_serializer=notas__pb2.AlunoRequest.SerializeToString,
                response_deserializer=notas__pb2.MediaResponse.FromString,
                _registered_method=True)
        self.ListarNotasAluno = channel.unary_stream(
                '/gerencia_notas.GerenciadorNotas/ListarNotasAluno',
                request_serializer=notas__pb2.AlunoRequest.SerializeToString,
                response_deserializer=notas__pb2.Nota.FromString,
                _registered_method=True)


class GerenciadorNotasServicer(object):
    """==============================
    Definição do serviço
    ==============================
    """

    def AdicionarNota(self, request, context):
        """RPCs Unários (requisição/resposta simples)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlterarNota(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsultarNota(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalcularMedia(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarNotasAluno(self, request, context):
        """--- RPC Desafio ---
        Server Streaming: cliente pede as notas de um aluno,
        servidor envia um stream de notas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GerenciadorNotasServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AdicionarNota': grpc.unary_unary_rpc_method_handler(
                    servicer.AdicionarNota,
                    request_deserializer=notas__pb2.AdicionaNotaRequest.FromString,
                    response_serializer=notas__pb2.StatusResponse.SerializeToString,
            ),
            'AlterarNota': grpc.unary_unary_rpc_method_handler(
                    servicer.AlterarNota,
                    request_deserializer=notas__pb2.AdicionaNotaRequest.FromString,
                    response_serializer=notas__pb2.StatusResponse.SerializeToString,
            ),
            'ConsultarNota': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsultarNota,
                    request_deserializer=notas__pb2.AlunoDisciplinaRequest.FromString,
                    response_serializer=notas__pb2.ConsultaNotaResponse.SerializeToString,
            ),
            'CalcularMedia': grpc.unary_unary_rpc_method_handler(
                    servicer.CalcularMedia,
                    request_deserializer=notas__pb2.AlunoRequest.FromString,
                    response_serializer=notas__pb2.MediaResponse.SerializeToString,
            ),
            'ListarNotasAluno': grpc.unary_stream_rpc_method_handler(
                    servicer.ListarNotasAluno,
                    request_deserializer=notas__pb2.AlunoRequest.FromString,
                    response_serializer=notas__pb2.Nota.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gerencia_notas.GerenciadorNotas', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gerencia_notas.GerenciadorNotas', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GerenciadorNotas(object):
    """==============================
    Definição do serviço
    ==============================
    """

    @staticmethod
    def AdicionarNota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gerencia_notas.GerenciadorNotas/AdicionarNota',
            notas__pb2.AdicionaNotaRequest.SerializeToString,
            notas__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AlterarNota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gerencia_notas.GerenciadorNotas/AlterarNota',
            notas__pb2.AdicionaNotaRequest.SerializeToString,
            notas__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConsultarNota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gerencia_notas.GerenciadorNotas/ConsultarNota',
            notas__pb2.AlunoDisciplinaRequest.SerializeToString,
            notas__pb2.ConsultaNotaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CalcularMedia(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gerencia_notas.GerenciadorNotas/CalcularMedia',
            notas__pb2.AlunoRequest.SerializeToString,
            notas__pb2.MediaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListarNotasAluno(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/gerencia_notas.GerenciadorNotas/ListarNotasAluno',
            notas__pb2.AlunoRequest.SerializeToString,
            notas__pb2.Nota.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
