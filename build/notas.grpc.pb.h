// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: notas.proto
#ifndef GRPC_notas_2eproto__INCLUDED
#define GRPC_notas_2eproto__INCLUDED

#include "notas.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gerencia_notas {

// Definição do serviço
class GerenciadorNotas final {
 public:
  static constexpr char const* service_full_name() {
    return "gerencia_notas.GerenciadorNotas";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPCs Unários
    virtual ::grpc::Status AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::gerencia_notas::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>> AsyncAdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>>(AsyncAdicionarNotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>> PrepareAsyncAdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>>(PrepareAsyncAdicionarNotaRaw(context, request, cq));
    }
    virtual ::grpc::Status AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::gerencia_notas::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>> AsyncAlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>>(AsyncAlterarNotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>> PrepareAsyncAlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>>(PrepareAsyncAlterarNotaRaw(context, request, cq));
    }
    virtual ::grpc::Status ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::gerencia_notas::ConsultaNotaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::ConsultaNotaResponse>> AsyncConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::ConsultaNotaResponse>>(AsyncConsultarNotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::ConsultaNotaResponse>> PrepareAsyncConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::ConsultaNotaResponse>>(PrepareAsyncConsultarNotaRaw(context, request, cq));
    }
    virtual ::grpc::Status CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::gerencia_notas::MediaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::MediaResponse>> AsyncCalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::MediaResponse>>(AsyncCalcularMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::MediaResponse>> PrepareAsyncCalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::MediaResponse>>(PrepareAsyncCalcularMediaRaw(context, request, cq));
    }
    // Server Streaming
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gerencia_notas::Nota>> ListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gerencia_notas::Nota>>(ListarNotasAlunoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gerencia_notas::Nota>> AsyncListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gerencia_notas::Nota>>(AsyncListarNotasAlunoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gerencia_notas::Nota>> PrepareAsyncListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gerencia_notas::Nota>>(PrepareAsyncListarNotasAlunoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RPCs Unários
      virtual void AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Server Streaming
      virtual void ListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::grpc::ClientReadReactor< ::gerencia_notas::Nota>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>* AsyncAdicionarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>* PrepareAsyncAdicionarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>* AsyncAlterarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::StatusResponse>* PrepareAsyncAlterarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::ConsultaNotaResponse>* AsyncConsultarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::ConsultaNotaResponse>* PrepareAsyncConsultarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::MediaResponse>* AsyncCalcularMediaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gerencia_notas::MediaResponse>* PrepareAsyncCalcularMediaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gerencia_notas::Nota>* ListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gerencia_notas::Nota>* AsyncListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gerencia_notas::Nota>* PrepareAsyncListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::gerencia_notas::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>> AsyncAdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>>(AsyncAdicionarNotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>> PrepareAsyncAdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>>(PrepareAsyncAdicionarNotaRaw(context, request, cq));
    }
    ::grpc::Status AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::gerencia_notas::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>> AsyncAlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>>(AsyncAlterarNotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>> PrepareAsyncAlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>>(PrepareAsyncAlterarNotaRaw(context, request, cq));
    }
    ::grpc::Status ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::gerencia_notas::ConsultaNotaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>> AsyncConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>>(AsyncConsultarNotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>> PrepareAsyncConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>>(PrepareAsyncConsultarNotaRaw(context, request, cq));
    }
    ::grpc::Status CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::gerencia_notas::MediaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>> AsyncCalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>>(AsyncCalcularMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>> PrepareAsyncCalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>>(PrepareAsyncCalcularMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gerencia_notas::Nota>> ListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gerencia_notas::Nota>>(ListarNotasAlunoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gerencia_notas::Nota>> AsyncListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gerencia_notas::Nota>>(AsyncListarNotasAlunoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gerencia_notas::Nota>> PrepareAsyncListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gerencia_notas::Nota>>(PrepareAsyncListarNotasAlunoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response, std::function<void(::grpc::Status)>) override;
      void CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::grpc::ClientReadReactor< ::gerencia_notas::Nota>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* AsyncAdicionarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* PrepareAsyncAdicionarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* AsyncAlterarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* PrepareAsyncAlterarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>* AsyncConsultarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>* PrepareAsyncConsultarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>* AsyncCalcularMediaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>* PrepareAsyncCalcularMediaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::gerencia_notas::Nota>* ListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request) override;
    ::grpc::ClientAsyncReader< ::gerencia_notas::Nota>* AsyncListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gerencia_notas::Nota>* PrepareAsyncListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AdicionarNota_;
    const ::grpc::internal::RpcMethod rpcmethod_AlterarNota_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsultarNota_;
    const ::grpc::internal::RpcMethod rpcmethod_CalcularMedia_;
    const ::grpc::internal::RpcMethod rpcmethod_ListarNotasAluno_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPCs Unários
    virtual ::grpc::Status AdicionarNota(::grpc::ServerContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response);
    virtual ::grpc::Status AlterarNota(::grpc::ServerContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response);
    virtual ::grpc::Status ConsultarNota(::grpc::ServerContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response);
    virtual ::grpc::Status CalcularMedia(::grpc::ServerContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response);
    // Server Streaming
    virtual ::grpc::Status ListarNotasAluno(::grpc::ServerContext* context, const ::gerencia_notas::AlunoRequest* request, ::grpc::ServerWriter< ::gerencia_notas::Nota>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_AdicionarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AdicionarNota() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AdicionarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdicionarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdicionarNota(::grpc::ServerContext* context, ::gerencia_notas::AdicionaNotaRequest* request, ::grpc::ServerAsyncResponseWriter< ::gerencia_notas::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AlterarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AlterarNota() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AlterarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterarNota(::grpc::ServerContext* context, ::gerencia_notas::AdicionaNotaRequest* request, ::grpc::ServerAsyncResponseWriter< ::gerencia_notas::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsultarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsultarNota() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConsultarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsultarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsultarNota(::grpc::ServerContext* context, ::gerencia_notas::AlunoDisciplinaRequest* request, ::grpc::ServerAsyncResponseWriter< ::gerencia_notas::ConsultaNotaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CalcularMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CalcularMedia() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CalcularMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcularMedia(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCalcularMedia(::grpc::ServerContext* context, ::gerencia_notas::AlunoRequest* request, ::grpc::ServerAsyncResponseWriter< ::gerencia_notas::MediaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListarNotasAluno : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListarNotasAluno() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListarNotasAluno() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListarNotasAluno(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::grpc::ServerWriter< ::gerencia_notas::Nota>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListarNotasAluno(::grpc::ServerContext* context, ::gerencia_notas::AlunoRequest* request, ::grpc::ServerAsyncWriter< ::gerencia_notas::Nota>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AdicionarNota<WithAsyncMethod_AlterarNota<WithAsyncMethod_ConsultarNota<WithAsyncMethod_CalcularMedia<WithAsyncMethod_ListarNotasAluno<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AdicionarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AdicionarNota() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response) { return this->AdicionarNota(context, request, response); }));}
    void SetMessageAllocatorFor_AdicionarNota(
        ::grpc::MessageAllocator< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AdicionarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdicionarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AdicionarNota(
      ::grpc::CallbackServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AlterarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AlterarNota() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response) { return this->AlterarNota(context, request, response); }));}
    void SetMessageAllocatorFor_AlterarNota(
        ::grpc::MessageAllocator< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AlterarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AlterarNota(
      ::grpc::CallbackServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsultarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsultarNota() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response) { return this->ConsultarNota(context, request, response); }));}
    void SetMessageAllocatorFor_ConsultarNota(
        ::grpc::MessageAllocator< ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsultarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsultarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsultarNota(
      ::grpc::CallbackServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CalcularMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CalcularMedia() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response) { return this->CalcularMedia(context, request, response); }));}
    void SetMessageAllocatorFor_CalcularMedia(
        ::grpc::MessageAllocator< ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CalcularMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcularMedia(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CalcularMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListarNotasAluno : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListarNotasAluno() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gerencia_notas::AlunoRequest, ::gerencia_notas::Nota>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gerencia_notas::AlunoRequest* request) { return this->ListarNotasAluno(context, request); }));
    }
    ~WithCallbackMethod_ListarNotasAluno() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListarNotasAluno(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::grpc::ServerWriter< ::gerencia_notas::Nota>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::gerencia_notas::Nota>* ListarNotasAluno(
      ::grpc::CallbackServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AdicionarNota<WithCallbackMethod_AlterarNota<WithCallbackMethod_ConsultarNota<WithCallbackMethod_CalcularMedia<WithCallbackMethod_ListarNotasAluno<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AdicionarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AdicionarNota() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AdicionarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdicionarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AlterarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AlterarNota() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AlterarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsultarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsultarNota() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConsultarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsultarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CalcularMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CalcularMedia() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CalcularMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcularMedia(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListarNotasAluno : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListarNotasAluno() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListarNotasAluno() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListarNotasAluno(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::grpc::ServerWriter< ::gerencia_notas::Nota>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AdicionarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AdicionarNota() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AdicionarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdicionarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdicionarNota(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AlterarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AlterarNota() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AlterarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAlterarNota(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsultarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsultarNota() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConsultarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsultarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsultarNota(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CalcularMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CalcularMedia() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CalcularMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcularMedia(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCalcularMedia(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListarNotasAluno : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListarNotasAluno() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListarNotasAluno() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListarNotasAluno(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::grpc::ServerWriter< ::gerencia_notas::Nota>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListarNotasAluno(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AdicionarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AdicionarNota() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AdicionarNota(context, request, response); }));
    }
    ~WithRawCallbackMethod_AdicionarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AdicionarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AdicionarNota(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AlterarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AlterarNota() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AlterarNota(context, request, response); }));
    }
    ~WithRawCallbackMethod_AlterarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AlterarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AlterarNota(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsultarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsultarNota() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsultarNota(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsultarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsultarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsultarNota(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CalcularMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CalcularMedia() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CalcularMedia(context, request, response); }));
    }
    ~WithRawCallbackMethod_CalcularMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalcularMedia(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CalcularMedia(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListarNotasAluno : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListarNotasAluno() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListarNotasAluno(context, request); }));
    }
    ~WithRawCallbackMethod_ListarNotasAluno() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListarNotasAluno(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::grpc::ServerWriter< ::gerencia_notas::Nota>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListarNotasAluno(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AdicionarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AdicionarNota() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>* streamer) {
                       return this->StreamedAdicionarNota(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AdicionarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AdicionarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdicionarNota(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gerencia_notas::AdicionaNotaRequest,::gerencia_notas::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AlterarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AlterarNota() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse>* streamer) {
                       return this->StreamedAlterarNota(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AlterarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AlterarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AdicionaNotaRequest* /*request*/, ::gerencia_notas::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAlterarNota(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gerencia_notas::AdicionaNotaRequest,::gerencia_notas::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsultarNota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsultarNota() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse>* streamer) {
                       return this->StreamedConsultarNota(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsultarNota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsultarNota(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoDisciplinaRequest* /*request*/, ::gerencia_notas::ConsultaNotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsultarNota(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gerencia_notas::AlunoDisciplinaRequest,::gerencia_notas::ConsultaNotaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CalcularMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CalcularMedia() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse>* streamer) {
                       return this->StreamedCalcularMedia(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CalcularMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CalcularMedia(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::gerencia_notas::MediaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCalcularMedia(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gerencia_notas::AlunoRequest,::gerencia_notas::MediaResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AdicionarNota<WithStreamedUnaryMethod_AlterarNota<WithStreamedUnaryMethod_ConsultarNota<WithStreamedUnaryMethod_CalcularMedia<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListarNotasAluno : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListarNotasAluno() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gerencia_notas::AlunoRequest, ::gerencia_notas::Nota>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gerencia_notas::AlunoRequest, ::gerencia_notas::Nota>* streamer) {
                       return this->StreamedListarNotasAluno(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListarNotasAluno() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListarNotasAluno(::grpc::ServerContext* /*context*/, const ::gerencia_notas::AlunoRequest* /*request*/, ::grpc::ServerWriter< ::gerencia_notas::Nota>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListarNotasAluno(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gerencia_notas::AlunoRequest,::gerencia_notas::Nota>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListarNotasAluno<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AdicionarNota<WithStreamedUnaryMethod_AlterarNota<WithStreamedUnaryMethod_ConsultarNota<WithStreamedUnaryMethod_CalcularMedia<WithSplitStreamingMethod_ListarNotasAluno<Service > > > > > StreamedService;
};

}  // namespace gerencia_notas


#endif  // GRPC_notas_2eproto__INCLUDED
