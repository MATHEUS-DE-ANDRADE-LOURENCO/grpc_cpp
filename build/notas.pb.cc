// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notas.proto

#include "notas.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gerencia_notas {
PROTOBUF_CONSTEXPR Nota::Nota(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cod_disciplina_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ano_)*/0
  , /*decltype(_impl_.semestre_)*/0
  , /*decltype(_impl_.nota_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotaDefaultTypeInternal() {}
  union {
    Nota _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotaDefaultTypeInternal _Nota_default_instance_;
PROTOBUF_CONSTEXPR ConsultaNotaResponse::ConsultaNotaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_erro_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nota_)*/nullptr
  , /*decltype(_impl_.sucesso_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsultaNotaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsultaNotaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsultaNotaResponseDefaultTypeInternal() {}
  union {
    ConsultaNotaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsultaNotaResponseDefaultTypeInternal _ConsultaNotaResponse_default_instance_;
PROTOBUF_CONSTEXPR AlunoDisciplinaRequest::AlunoDisciplinaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cod_disciplina_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlunoDisciplinaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlunoDisciplinaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlunoDisciplinaRequestDefaultTypeInternal() {}
  union {
    AlunoDisciplinaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlunoDisciplinaRequestDefaultTypeInternal _AlunoDisciplinaRequest_default_instance_;
PROTOBUF_CONSTEXPR AdicionaNotaRequest::AdicionaNotaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cod_disciplina_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ano_)*/0
  , /*decltype(_impl_.semestre_)*/0
  , /*decltype(_impl_.nota_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdicionaNotaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdicionaNotaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdicionaNotaRequestDefaultTypeInternal() {}
  union {
    AdicionaNotaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdicionaNotaRequestDefaultTypeInternal _AdicionaNotaRequest_default_instance_;
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sucesso_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
PROTOBUF_CONSTEXPR AlunoRequest::AlunoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlunoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlunoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlunoRequestDefaultTypeInternal() {}
  union {
    AlunoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlunoRequestDefaultTypeInternal _AlunoRequest_default_instance_;
PROTOBUF_CONSTEXPR MediaResponse::MediaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_erro_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sucesso_)*/false
  , /*decltype(_impl_.media_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MediaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaResponseDefaultTypeInternal() {}
  union {
    MediaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaResponseDefaultTypeInternal _MediaResponse_default_instance_;
}  // namespace gerencia_notas
static ::_pb::Metadata file_level_metadata_notas_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_notas_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_notas_2eproto = nullptr;

const uint32_t TableStruct_notas_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::Nota, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::Nota, _impl_.ra_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::Nota, _impl_.cod_disciplina_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::Nota, _impl_.ano_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::Nota, _impl_.semestre_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::Nota, _impl_.nota_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::ConsultaNotaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::ConsultaNotaResponse, _impl_.sucesso_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::ConsultaNotaResponse, _impl_.nota_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::ConsultaNotaResponse, _impl_.msg_erro_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AlunoDisciplinaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AlunoDisciplinaRequest, _impl_.ra_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AlunoDisciplinaRequest, _impl_.cod_disciplina_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AdicionaNotaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AdicionaNotaRequest, _impl_.ra_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AdicionaNotaRequest, _impl_.cod_disciplina_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AdicionaNotaRequest, _impl_.ano_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AdicionaNotaRequest, _impl_.semestre_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AdicionaNotaRequest, _impl_.nota_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::StatusResponse, _impl_.sucesso_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::StatusResponse, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AlunoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::AlunoRequest, _impl_.ra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::MediaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::MediaResponse, _impl_.sucesso_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::MediaResponse, _impl_.media_),
  PROTOBUF_FIELD_OFFSET(::gerencia_notas::MediaResponse, _impl_.msg_erro_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gerencia_notas::Nota)},
  { 11, -1, -1, sizeof(::gerencia_notas::ConsultaNotaResponse)},
  { 20, -1, -1, sizeof(::gerencia_notas::AlunoDisciplinaRequest)},
  { 28, -1, -1, sizeof(::gerencia_notas::AdicionaNotaRequest)},
  { 39, -1, -1, sizeof(::gerencia_notas::StatusResponse)},
  { 47, -1, -1, sizeof(::gerencia_notas::AlunoRequest)},
  { 54, -1, -1, sizeof(::gerencia_notas::MediaResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gerencia_notas::_Nota_default_instance_._instance,
  &::gerencia_notas::_ConsultaNotaResponse_default_instance_._instance,
  &::gerencia_notas::_AlunoDisciplinaRequest_default_instance_._instance,
  &::gerencia_notas::_AdicionaNotaRequest_default_instance_._instance,
  &::gerencia_notas::_StatusResponse_default_instance_._instance,
  &::gerencia_notas::_AlunoRequest_default_instance_._instance,
  &::gerencia_notas::_MediaResponse_default_instance_._instance,
};

const char descriptor_table_protodef_notas_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013notas.proto\022\016gerencia_notas\"W\n\004Nota\022\n\n"
  "\002ra\030\001 \001(\t\022\026\n\016cod_disciplina\030\002 \001(\t\022\013\n\003ano"
  "\030\003 \001(\005\022\020\n\010semestre\030\004 \001(\005\022\014\n\004nota\030\005 \001(\002\"]"
  "\n\024ConsultaNotaResponse\022\017\n\007sucesso\030\001 \001(\010\022"
  "\"\n\004nota\030\002 \001(\0132\024.gerencia_notas.Nota\022\020\n\010m"
  "sg_erro\030\003 \001(\t\"<\n\026AlunoDisciplinaRequest\022"
  "\n\n\002ra\030\001 \001(\t\022\026\n\016cod_disciplina\030\002 \001(\t\"f\n\023A"
  "dicionaNotaRequest\022\n\n\002ra\030\001 \001(\t\022\026\n\016cod_di"
  "sciplina\030\002 \001(\t\022\013\n\003ano\030\003 \001(\005\022\020\n\010semestre\030"
  "\004 \001(\005\022\014\n\004nota\030\005 \001(\002\".\n\016StatusResponse\022\017\n"
  "\007sucesso\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"\032\n\014AlunoRequ"
  "est\022\n\n\002ra\030\001 \001(\t\"A\n\rMediaResponse\022\017\n\007suce"
  "sso\030\001 \001(\010\022\r\n\005media\030\002 \001(\002\022\020\n\010msg_erro\030\003 \001"
  "(\t2\275\003\n\020GerenciadorNotas\022V\n\rAdicionarNota"
  "\022#.gerencia_notas.AdicionaNotaRequest\032\036."
  "gerencia_notas.StatusResponse\"\000\022T\n\013Alter"
  "arNota\022#.gerencia_notas.AdicionaNotaRequ"
  "est\032\036.gerencia_notas.StatusResponse\"\000\022_\n"
  "\rConsultarNota\022&.gerencia_notas.AlunoDis"
  "ciplinaRequest\032$.gerencia_notas.Consulta"
  "NotaResponse\"\000\022N\n\rCalcularMedia\022\034.gerenc"
  "ia_notas.AlunoRequest\032\035.gerencia_notas.M"
  "ediaResponse\"\000\022J\n\020ListarNotasAluno\022\034.ger"
  "encia_notas.AlunoRequest\032\024.gerencia_nota"
  "s.Nota\"\0000\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_notas_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_notas_2eproto = {
    false, false, 978, descriptor_table_protodef_notas_2eproto,
    "notas.proto",
    &descriptor_table_notas_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_notas_2eproto::offsets,
    file_level_metadata_notas_2eproto, file_level_enum_descriptors_notas_2eproto,
    file_level_service_descriptors_notas_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_notas_2eproto_getter() {
  return &descriptor_table_notas_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_notas_2eproto(&descriptor_table_notas_2eproto);
namespace gerencia_notas {

// ===================================================================

class Nota::_Internal {
 public:
};

Nota::Nota(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.Nota)
}
Nota::Nota(const Nota& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Nota* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , decltype(_impl_.cod_disciplina_){}
    , decltype(_impl_.ano_){}
    , decltype(_impl_.semestre_){}
    , decltype(_impl_.nota_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ra().empty()) {
    _this->_impl_.ra_.Set(from._internal_ra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cod_disciplina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cod_disciplina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cod_disciplina().empty()) {
    _this->_impl_.cod_disciplina_.Set(from._internal_cod_disciplina(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ano_, &from._impl_.ano_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nota_) -
    reinterpret_cast<char*>(&_impl_.ano_)) + sizeof(_impl_.nota_));
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.Nota)
}

inline void Nota::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , decltype(_impl_.cod_disciplina_){}
    , decltype(_impl_.ano_){0}
    , decltype(_impl_.semestre_){0}
    , decltype(_impl_.nota_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cod_disciplina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cod_disciplina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Nota::~Nota() {
  // @@protoc_insertion_point(destructor:gerencia_notas.Nota)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Nota::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ra_.Destroy();
  _impl_.cod_disciplina_.Destroy();
}

void Nota::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Nota::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.Nota)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ra_.ClearToEmpty();
  _impl_.cod_disciplina_.ClearToEmpty();
  ::memset(&_impl_.ano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nota_) -
      reinterpret_cast<char*>(&_impl_.ano_)) + sizeof(_impl_.nota_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nota::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ra = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.Nota.ra"));
        } else
          goto handle_unusual;
        continue;
      // string cod_disciplina = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cod_disciplina();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.Nota.cod_disciplina"));
        } else
          goto handle_unusual;
        continue;
      // int32 ano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 semestre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.semestre_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float nota = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.nota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Nota::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.Nota)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ra().data(), static_cast<int>(this->_internal_ra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.Nota.ra");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ra(), target);
  }

  // string cod_disciplina = 2;
  if (!this->_internal_cod_disciplina().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cod_disciplina().data(), static_cast<int>(this->_internal_cod_disciplina().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.Nota.cod_disciplina");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cod_disciplina(), target);
  }

  // int32 ano = 3;
  if (this->_internal_ano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ano(), target);
  }

  // int32 semestre = 4;
  if (this->_internal_semestre() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_semestre(), target);
  }

  // float nota = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nota = this->_internal_nota();
  uint32_t raw_nota;
  memcpy(&raw_nota, &tmp_nota, sizeof(tmp_nota));
  if (raw_nota != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_nota(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.Nota)
  return target;
}

size_t Nota::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.Nota)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ra());
  }

  // string cod_disciplina = 2;
  if (!this->_internal_cod_disciplina().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cod_disciplina());
  }

  // int32 ano = 3;
  if (this->_internal_ano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ano());
  }

  // int32 semestre = 4;
  if (this->_internal_semestre() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_semestre());
  }

  // float nota = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nota = this->_internal_nota();
  uint32_t raw_nota;
  memcpy(&raw_nota, &tmp_nota, sizeof(tmp_nota));
  if (raw_nota != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Nota::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Nota::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Nota::GetClassData() const { return &_class_data_; }


void Nota::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Nota*>(&to_msg);
  auto& from = static_cast<const Nota&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.Nota)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ra().empty()) {
    _this->_internal_set_ra(from._internal_ra());
  }
  if (!from._internal_cod_disciplina().empty()) {
    _this->_internal_set_cod_disciplina(from._internal_cod_disciplina());
  }
  if (from._internal_ano() != 0) {
    _this->_internal_set_ano(from._internal_ano());
  }
  if (from._internal_semestre() != 0) {
    _this->_internal_set_semestre(from._internal_semestre());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nota = from._internal_nota();
  uint32_t raw_nota;
  memcpy(&raw_nota, &tmp_nota, sizeof(tmp_nota));
  if (raw_nota != 0) {
    _this->_internal_set_nota(from._internal_nota());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Nota::CopyFrom(const Nota& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.Nota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nota::IsInitialized() const {
  return true;
}

void Nota::InternalSwap(Nota* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ra_, lhs_arena,
      &other->_impl_.ra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cod_disciplina_, lhs_arena,
      &other->_impl_.cod_disciplina_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Nota, _impl_.nota_)
      + sizeof(Nota::_impl_.nota_)
      - PROTOBUF_FIELD_OFFSET(Nota, _impl_.ano_)>(
          reinterpret_cast<char*>(&_impl_.ano_),
          reinterpret_cast<char*>(&other->_impl_.ano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Nota::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[0]);
}

// ===================================================================

class ConsultaNotaResponse::_Internal {
 public:
  static const ::gerencia_notas::Nota& nota(const ConsultaNotaResponse* msg);
};

const ::gerencia_notas::Nota&
ConsultaNotaResponse::_Internal::nota(const ConsultaNotaResponse* msg) {
  return *msg->_impl_.nota_;
}
ConsultaNotaResponse::ConsultaNotaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.ConsultaNotaResponse)
}
ConsultaNotaResponse::ConsultaNotaResponse(const ConsultaNotaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsultaNotaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_erro_){}
    , decltype(_impl_.nota_){nullptr}
    , decltype(_impl_.sucesso_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_erro_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_erro_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_erro().empty()) {
    _this->_impl_.msg_erro_.Set(from._internal_msg_erro(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nota()) {
    _this->_impl_.nota_ = new ::gerencia_notas::Nota(*from._impl_.nota_);
  }
  _this->_impl_.sucesso_ = from._impl_.sucesso_;
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.ConsultaNotaResponse)
}

inline void ConsultaNotaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_erro_){}
    , decltype(_impl_.nota_){nullptr}
    , decltype(_impl_.sucesso_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_erro_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_erro_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConsultaNotaResponse::~ConsultaNotaResponse() {
  // @@protoc_insertion_point(destructor:gerencia_notas.ConsultaNotaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsultaNotaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_erro_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nota_;
}

void ConsultaNotaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsultaNotaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.ConsultaNotaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_erro_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.nota_ != nullptr) {
    delete _impl_.nota_;
  }
  _impl_.nota_ = nullptr;
  _impl_.sucesso_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsultaNotaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool sucesso = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sucesso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gerencia_notas.Nota nota = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nota(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg_erro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_erro();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.ConsultaNotaResponse.msg_erro"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsultaNotaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.ConsultaNotaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sucesso = 1;
  if (this->_internal_sucesso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sucesso(), target);
  }

  // .gerencia_notas.Nota nota = 2;
  if (this->_internal_has_nota()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nota(this),
        _Internal::nota(this).GetCachedSize(), target, stream);
  }

  // string msg_erro = 3;
  if (!this->_internal_msg_erro().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_erro().data(), static_cast<int>(this->_internal_msg_erro().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.ConsultaNotaResponse.msg_erro");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_erro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.ConsultaNotaResponse)
  return target;
}

size_t ConsultaNotaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.ConsultaNotaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_erro = 3;
  if (!this->_internal_msg_erro().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_erro());
  }

  // .gerencia_notas.Nota nota = 2;
  if (this->_internal_has_nota()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nota_);
  }

  // bool sucesso = 1;
  if (this->_internal_sucesso() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsultaNotaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsultaNotaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsultaNotaResponse::GetClassData() const { return &_class_data_; }


void ConsultaNotaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsultaNotaResponse*>(&to_msg);
  auto& from = static_cast<const ConsultaNotaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.ConsultaNotaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_erro().empty()) {
    _this->_internal_set_msg_erro(from._internal_msg_erro());
  }
  if (from._internal_has_nota()) {
    _this->_internal_mutable_nota()->::gerencia_notas::Nota::MergeFrom(
        from._internal_nota());
  }
  if (from._internal_sucesso() != 0) {
    _this->_internal_set_sucesso(from._internal_sucesso());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsultaNotaResponse::CopyFrom(const ConsultaNotaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.ConsultaNotaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsultaNotaResponse::IsInitialized() const {
  return true;
}

void ConsultaNotaResponse::InternalSwap(ConsultaNotaResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_erro_, lhs_arena,
      &other->_impl_.msg_erro_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsultaNotaResponse, _impl_.sucesso_)
      + sizeof(ConsultaNotaResponse::_impl_.sucesso_)
      - PROTOBUF_FIELD_OFFSET(ConsultaNotaResponse, _impl_.nota_)>(
          reinterpret_cast<char*>(&_impl_.nota_),
          reinterpret_cast<char*>(&other->_impl_.nota_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsultaNotaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[1]);
}

// ===================================================================

class AlunoDisciplinaRequest::_Internal {
 public:
};

AlunoDisciplinaRequest::AlunoDisciplinaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.AlunoDisciplinaRequest)
}
AlunoDisciplinaRequest::AlunoDisciplinaRequest(const AlunoDisciplinaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlunoDisciplinaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , decltype(_impl_.cod_disciplina_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ra().empty()) {
    _this->_impl_.ra_.Set(from._internal_ra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cod_disciplina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cod_disciplina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cod_disciplina().empty()) {
    _this->_impl_.cod_disciplina_.Set(from._internal_cod_disciplina(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.AlunoDisciplinaRequest)
}

inline void AlunoDisciplinaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , decltype(_impl_.cod_disciplina_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cod_disciplina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cod_disciplina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlunoDisciplinaRequest::~AlunoDisciplinaRequest() {
  // @@protoc_insertion_point(destructor:gerencia_notas.AlunoDisciplinaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlunoDisciplinaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ra_.Destroy();
  _impl_.cod_disciplina_.Destroy();
}

void AlunoDisciplinaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlunoDisciplinaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.AlunoDisciplinaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ra_.ClearToEmpty();
  _impl_.cod_disciplina_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlunoDisciplinaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ra = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.AlunoDisciplinaRequest.ra"));
        } else
          goto handle_unusual;
        continue;
      // string cod_disciplina = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cod_disciplina();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.AlunoDisciplinaRequest.cod_disciplina"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlunoDisciplinaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.AlunoDisciplinaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ra().data(), static_cast<int>(this->_internal_ra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.AlunoDisciplinaRequest.ra");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ra(), target);
  }

  // string cod_disciplina = 2;
  if (!this->_internal_cod_disciplina().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cod_disciplina().data(), static_cast<int>(this->_internal_cod_disciplina().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.AlunoDisciplinaRequest.cod_disciplina");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cod_disciplina(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.AlunoDisciplinaRequest)
  return target;
}

size_t AlunoDisciplinaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.AlunoDisciplinaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ra());
  }

  // string cod_disciplina = 2;
  if (!this->_internal_cod_disciplina().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cod_disciplina());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlunoDisciplinaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlunoDisciplinaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlunoDisciplinaRequest::GetClassData() const { return &_class_data_; }


void AlunoDisciplinaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlunoDisciplinaRequest*>(&to_msg);
  auto& from = static_cast<const AlunoDisciplinaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.AlunoDisciplinaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ra().empty()) {
    _this->_internal_set_ra(from._internal_ra());
  }
  if (!from._internal_cod_disciplina().empty()) {
    _this->_internal_set_cod_disciplina(from._internal_cod_disciplina());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlunoDisciplinaRequest::CopyFrom(const AlunoDisciplinaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.AlunoDisciplinaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlunoDisciplinaRequest::IsInitialized() const {
  return true;
}

void AlunoDisciplinaRequest::InternalSwap(AlunoDisciplinaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ra_, lhs_arena,
      &other->_impl_.ra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cod_disciplina_, lhs_arena,
      &other->_impl_.cod_disciplina_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AlunoDisciplinaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[2]);
}

// ===================================================================

class AdicionaNotaRequest::_Internal {
 public:
};

AdicionaNotaRequest::AdicionaNotaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.AdicionaNotaRequest)
}
AdicionaNotaRequest::AdicionaNotaRequest(const AdicionaNotaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdicionaNotaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , decltype(_impl_.cod_disciplina_){}
    , decltype(_impl_.ano_){}
    , decltype(_impl_.semestre_){}
    , decltype(_impl_.nota_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ra().empty()) {
    _this->_impl_.ra_.Set(from._internal_ra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cod_disciplina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cod_disciplina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cod_disciplina().empty()) {
    _this->_impl_.cod_disciplina_.Set(from._internal_cod_disciplina(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ano_, &from._impl_.ano_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nota_) -
    reinterpret_cast<char*>(&_impl_.ano_)) + sizeof(_impl_.nota_));
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.AdicionaNotaRequest)
}

inline void AdicionaNotaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , decltype(_impl_.cod_disciplina_){}
    , decltype(_impl_.ano_){0}
    , decltype(_impl_.semestre_){0}
    , decltype(_impl_.nota_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cod_disciplina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cod_disciplina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdicionaNotaRequest::~AdicionaNotaRequest() {
  // @@protoc_insertion_point(destructor:gerencia_notas.AdicionaNotaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdicionaNotaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ra_.Destroy();
  _impl_.cod_disciplina_.Destroy();
}

void AdicionaNotaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdicionaNotaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.AdicionaNotaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ra_.ClearToEmpty();
  _impl_.cod_disciplina_.ClearToEmpty();
  ::memset(&_impl_.ano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nota_) -
      reinterpret_cast<char*>(&_impl_.ano_)) + sizeof(_impl_.nota_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdicionaNotaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ra = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.AdicionaNotaRequest.ra"));
        } else
          goto handle_unusual;
        continue;
      // string cod_disciplina = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cod_disciplina();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.AdicionaNotaRequest.cod_disciplina"));
        } else
          goto handle_unusual;
        continue;
      // int32 ano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 semestre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.semestre_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float nota = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.nota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdicionaNotaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.AdicionaNotaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ra().data(), static_cast<int>(this->_internal_ra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.AdicionaNotaRequest.ra");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ra(), target);
  }

  // string cod_disciplina = 2;
  if (!this->_internal_cod_disciplina().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cod_disciplina().data(), static_cast<int>(this->_internal_cod_disciplina().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.AdicionaNotaRequest.cod_disciplina");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cod_disciplina(), target);
  }

  // int32 ano = 3;
  if (this->_internal_ano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ano(), target);
  }

  // int32 semestre = 4;
  if (this->_internal_semestre() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_semestre(), target);
  }

  // float nota = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nota = this->_internal_nota();
  uint32_t raw_nota;
  memcpy(&raw_nota, &tmp_nota, sizeof(tmp_nota));
  if (raw_nota != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_nota(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.AdicionaNotaRequest)
  return target;
}

size_t AdicionaNotaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.AdicionaNotaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ra());
  }

  // string cod_disciplina = 2;
  if (!this->_internal_cod_disciplina().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cod_disciplina());
  }

  // int32 ano = 3;
  if (this->_internal_ano() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ano());
  }

  // int32 semestre = 4;
  if (this->_internal_semestre() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_semestre());
  }

  // float nota = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nota = this->_internal_nota();
  uint32_t raw_nota;
  memcpy(&raw_nota, &tmp_nota, sizeof(tmp_nota));
  if (raw_nota != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdicionaNotaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdicionaNotaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdicionaNotaRequest::GetClassData() const { return &_class_data_; }


void AdicionaNotaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdicionaNotaRequest*>(&to_msg);
  auto& from = static_cast<const AdicionaNotaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.AdicionaNotaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ra().empty()) {
    _this->_internal_set_ra(from._internal_ra());
  }
  if (!from._internal_cod_disciplina().empty()) {
    _this->_internal_set_cod_disciplina(from._internal_cod_disciplina());
  }
  if (from._internal_ano() != 0) {
    _this->_internal_set_ano(from._internal_ano());
  }
  if (from._internal_semestre() != 0) {
    _this->_internal_set_semestre(from._internal_semestre());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nota = from._internal_nota();
  uint32_t raw_nota;
  memcpy(&raw_nota, &tmp_nota, sizeof(tmp_nota));
  if (raw_nota != 0) {
    _this->_internal_set_nota(from._internal_nota());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdicionaNotaRequest::CopyFrom(const AdicionaNotaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.AdicionaNotaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdicionaNotaRequest::IsInitialized() const {
  return true;
}

void AdicionaNotaRequest::InternalSwap(AdicionaNotaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ra_, lhs_arena,
      &other->_impl_.ra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cod_disciplina_, lhs_arena,
      &other->_impl_.cod_disciplina_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdicionaNotaRequest, _impl_.nota_)
      + sizeof(AdicionaNotaRequest::_impl_.nota_)
      - PROTOBUF_FIELD_OFFSET(AdicionaNotaRequest, _impl_.ano_)>(
          reinterpret_cast<char*>(&_impl_.ano_),
          reinterpret_cast<char*>(&other->_impl_.ano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdicionaNotaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[3]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.sucesso_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sucesso_ = from._impl_.sucesso_;
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.StatusResponse)
}

inline void StatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.sucesso_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:gerencia_notas.StatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void StatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.sucesso_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool sucesso = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sucesso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.StatusResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sucesso = 1;
  if (this->_internal_sucesso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sucesso(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.StatusResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool sucesso = 1;
  if (this->_internal_sucesso() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }


void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.StatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_sucesso() != 0) {
    _this->_internal_set_sucesso(from._internal_sucesso());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.sucesso_, other->_impl_.sucesso_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[4]);
}

// ===================================================================

class AlunoRequest::_Internal {
 public:
};

AlunoRequest::AlunoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.AlunoRequest)
}
AlunoRequest::AlunoRequest(const AlunoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlunoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ra().empty()) {
    _this->_impl_.ra_.Set(from._internal_ra(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.AlunoRequest)
}

inline void AlunoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ra_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AlunoRequest::~AlunoRequest() {
  // @@protoc_insertion_point(destructor:gerencia_notas.AlunoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlunoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ra_.Destroy();
}

void AlunoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlunoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.AlunoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ra_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlunoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ra = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.AlunoRequest.ra"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlunoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.AlunoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ra().data(), static_cast<int>(this->_internal_ra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.AlunoRequest.ra");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.AlunoRequest)
  return target;
}

size_t AlunoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.AlunoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ra = 1;
  if (!this->_internal_ra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ra());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlunoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlunoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlunoRequest::GetClassData() const { return &_class_data_; }


void AlunoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlunoRequest*>(&to_msg);
  auto& from = static_cast<const AlunoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.AlunoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ra().empty()) {
    _this->_internal_set_ra(from._internal_ra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlunoRequest::CopyFrom(const AlunoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.AlunoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlunoRequest::IsInitialized() const {
  return true;
}

void AlunoRequest::InternalSwap(AlunoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ra_, lhs_arena,
      &other->_impl_.ra_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AlunoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[5]);
}

// ===================================================================

class MediaResponse::_Internal {
 public:
};

MediaResponse::MediaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gerencia_notas.MediaResponse)
}
MediaResponse::MediaResponse(const MediaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_erro_){}
    , decltype(_impl_.sucesso_){}
    , decltype(_impl_.media_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_erro_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_erro_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_erro().empty()) {
    _this->_impl_.msg_erro_.Set(from._internal_msg_erro(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sucesso_, &from._impl_.sucesso_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.media_) -
    reinterpret_cast<char*>(&_impl_.sucesso_)) + sizeof(_impl_.media_));
  // @@protoc_insertion_point(copy_constructor:gerencia_notas.MediaResponse)
}

inline void MediaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_erro_){}
    , decltype(_impl_.sucesso_){false}
    , decltype(_impl_.media_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_erro_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_erro_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaResponse::~MediaResponse() {
  // @@protoc_insertion_point(destructor:gerencia_notas.MediaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_erro_.Destroy();
}

void MediaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gerencia_notas.MediaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_erro_.ClearToEmpty();
  ::memset(&_impl_.sucesso_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.media_) -
      reinterpret_cast<char*>(&_impl_.sucesso_)) + sizeof(_impl_.media_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool sucesso = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sucesso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float media = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.media_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string msg_erro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_erro();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gerencia_notas.MediaResponse.msg_erro"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gerencia_notas.MediaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sucesso = 1;
  if (this->_internal_sucesso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sucesso(), target);
  }

  // float media = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_media = this->_internal_media();
  uint32_t raw_media;
  memcpy(&raw_media, &tmp_media, sizeof(tmp_media));
  if (raw_media != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_media(), target);
  }

  // string msg_erro = 3;
  if (!this->_internal_msg_erro().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_erro().data(), static_cast<int>(this->_internal_msg_erro().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gerencia_notas.MediaResponse.msg_erro");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_erro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gerencia_notas.MediaResponse)
  return target;
}

size_t MediaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gerencia_notas.MediaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_erro = 3;
  if (!this->_internal_msg_erro().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_erro());
  }

  // bool sucesso = 1;
  if (this->_internal_sucesso() != 0) {
    total_size += 1 + 1;
  }

  // float media = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_media = this->_internal_media();
  uint32_t raw_media;
  memcpy(&raw_media, &tmp_media, sizeof(tmp_media));
  if (raw_media != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaResponse::GetClassData() const { return &_class_data_; }


void MediaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaResponse*>(&to_msg);
  auto& from = static_cast<const MediaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gerencia_notas.MediaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_erro().empty()) {
    _this->_internal_set_msg_erro(from._internal_msg_erro());
  }
  if (from._internal_sucesso() != 0) {
    _this->_internal_set_sucesso(from._internal_sucesso());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_media = from._internal_media();
  uint32_t raw_media;
  memcpy(&raw_media, &tmp_media, sizeof(tmp_media));
  if (raw_media != 0) {
    _this->_internal_set_media(from._internal_media());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaResponse::CopyFrom(const MediaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gerencia_notas.MediaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaResponse::IsInitialized() const {
  return true;
}

void MediaResponse::InternalSwap(MediaResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_erro_, lhs_arena,
      &other->_impl_.msg_erro_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaResponse, _impl_.media_)
      + sizeof(MediaResponse::_impl_.media_)
      - PROTOBUF_FIELD_OFFSET(MediaResponse, _impl_.sucesso_)>(
          reinterpret_cast<char*>(&_impl_.sucesso_),
          reinterpret_cast<char*>(&other->_impl_.sucesso_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notas_2eproto_getter, &descriptor_table_notas_2eproto_once,
      file_level_metadata_notas_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gerencia_notas
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gerencia_notas::Nota*
Arena::CreateMaybeMessage< ::gerencia_notas::Nota >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::Nota >(arena);
}
template<> PROTOBUF_NOINLINE ::gerencia_notas::ConsultaNotaResponse*
Arena::CreateMaybeMessage< ::gerencia_notas::ConsultaNotaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::ConsultaNotaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gerencia_notas::AlunoDisciplinaRequest*
Arena::CreateMaybeMessage< ::gerencia_notas::AlunoDisciplinaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::AlunoDisciplinaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gerencia_notas::AdicionaNotaRequest*
Arena::CreateMaybeMessage< ::gerencia_notas::AdicionaNotaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::AdicionaNotaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gerencia_notas::StatusResponse*
Arena::CreateMaybeMessage< ::gerencia_notas::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gerencia_notas::AlunoRequest*
Arena::CreateMaybeMessage< ::gerencia_notas::AlunoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::AlunoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gerencia_notas::MediaResponse*
Arena::CreateMaybeMessage< ::gerencia_notas::MediaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gerencia_notas::MediaResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
