// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: notas.proto

#include "notas.pb.h"
#include "notas.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gerencia_notas {

static const char* GerenciadorNotas_method_names[] = {
  "/gerencia_notas.GerenciadorNotas/AdicionarNota",
  "/gerencia_notas.GerenciadorNotas/AlterarNota",
  "/gerencia_notas.GerenciadorNotas/ConsultarNota",
  "/gerencia_notas.GerenciadorNotas/CalcularMedia",
  "/gerencia_notas.GerenciadorNotas/ListarNotasAluno",
};

std::unique_ptr< GerenciadorNotas::Stub> GerenciadorNotas::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GerenciadorNotas::Stub> stub(new GerenciadorNotas::Stub(channel, options));
  return stub;
}

GerenciadorNotas::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AdicionarNota_(GerenciadorNotas_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlterarNota_(GerenciadorNotas_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsultarNota_(GerenciadorNotas_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalcularMedia_(GerenciadorNotas_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListarNotasAluno_(GerenciadorNotas_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status GerenciadorNotas::Stub::AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::gerencia_notas::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AdicionarNota_, context, request, response);
}

void GerenciadorNotas::Stub::async::AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdicionarNota_, context, request, response, std::move(f));
}

void GerenciadorNotas::Stub::async::AdicionarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AdicionarNota_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* GerenciadorNotas::Stub::PrepareAsyncAdicionarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gerencia_notas::StatusResponse, ::gerencia_notas::AdicionaNotaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AdicionarNota_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* GerenciadorNotas::Stub::AsyncAdicionarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAdicionarNotaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GerenciadorNotas::Stub::AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::gerencia_notas::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AlterarNota_, context, request, response);
}

void GerenciadorNotas::Stub::async::AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AlterarNota_, context, request, response, std::move(f));
}

void GerenciadorNotas::Stub::async::AlterarNota(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AlterarNota_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* GerenciadorNotas::Stub::PrepareAsyncAlterarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gerencia_notas::StatusResponse, ::gerencia_notas::AdicionaNotaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AlterarNota_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::StatusResponse>* GerenciadorNotas::Stub::AsyncAlterarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AdicionaNotaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAlterarNotaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GerenciadorNotas::Stub::ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::gerencia_notas::ConsultaNotaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsultarNota_, context, request, response);
}

void GerenciadorNotas::Stub::async::ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsultarNota_, context, request, response, std::move(f));
}

void GerenciadorNotas::Stub::async::ConsultarNota(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsultarNota_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>* GerenciadorNotas::Stub::PrepareAsyncConsultarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gerencia_notas::ConsultaNotaResponse, ::gerencia_notas::AlunoDisciplinaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsultarNota_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::ConsultaNotaResponse>* GerenciadorNotas::Stub::AsyncConsultarNotaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoDisciplinaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsultarNotaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GerenciadorNotas::Stub::CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::gerencia_notas::MediaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalcularMedia_, context, request, response);
}

void GerenciadorNotas::Stub::async::CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalcularMedia_, context, request, response, std::move(f));
}

void GerenciadorNotas::Stub::async::CalcularMedia(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalcularMedia_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>* GerenciadorNotas::Stub::PrepareAsyncCalcularMediaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gerencia_notas::MediaResponse, ::gerencia_notas::AlunoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalcularMedia_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gerencia_notas::MediaResponse>* GerenciadorNotas::Stub::AsyncCalcularMediaRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalcularMediaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::gerencia_notas::Nota>* GerenciadorNotas::Stub::ListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::gerencia_notas::Nota>::Create(channel_.get(), rpcmethod_ListarNotasAluno_, context, request);
}

void GerenciadorNotas::Stub::async::ListarNotasAluno(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest* request, ::grpc::ClientReadReactor< ::gerencia_notas::Nota>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gerencia_notas::Nota>::Create(stub_->channel_.get(), stub_->rpcmethod_ListarNotasAluno_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gerencia_notas::Nota>* GerenciadorNotas::Stub::AsyncListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gerencia_notas::Nota>::Create(channel_.get(), cq, rpcmethod_ListarNotasAluno_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gerencia_notas::Nota>* GerenciadorNotas::Stub::PrepareAsyncListarNotasAlunoRaw(::grpc::ClientContext* context, const ::gerencia_notas::AlunoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gerencia_notas::Nota>::Create(channel_.get(), cq, rpcmethod_ListarNotasAluno_, context, request, false, nullptr);
}

GerenciadorNotas::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GerenciadorNotas_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GerenciadorNotas::Service, ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GerenciadorNotas::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gerencia_notas::AdicionaNotaRequest* req,
             ::gerencia_notas::StatusResponse* resp) {
               return service->AdicionarNota(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GerenciadorNotas_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GerenciadorNotas::Service, ::gerencia_notas::AdicionaNotaRequest, ::gerencia_notas::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GerenciadorNotas::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gerencia_notas::AdicionaNotaRequest* req,
             ::gerencia_notas::StatusResponse* resp) {
               return service->AlterarNota(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GerenciadorNotas_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GerenciadorNotas::Service, ::gerencia_notas::AlunoDisciplinaRequest, ::gerencia_notas::ConsultaNotaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GerenciadorNotas::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gerencia_notas::AlunoDisciplinaRequest* req,
             ::gerencia_notas::ConsultaNotaResponse* resp) {
               return service->ConsultarNota(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GerenciadorNotas_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GerenciadorNotas::Service, ::gerencia_notas::AlunoRequest, ::gerencia_notas::MediaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GerenciadorNotas::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gerencia_notas::AlunoRequest* req,
             ::gerencia_notas::MediaResponse* resp) {
               return service->CalcularMedia(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GerenciadorNotas_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GerenciadorNotas::Service, ::gerencia_notas::AlunoRequest, ::gerencia_notas::Nota>(
          [](GerenciadorNotas::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gerencia_notas::AlunoRequest* req,
             ::grpc::ServerWriter<::gerencia_notas::Nota>* writer) {
               return service->ListarNotasAluno(ctx, req, writer);
             }, this)));
}

GerenciadorNotas::Service::~Service() {
}

::grpc::Status GerenciadorNotas::Service::AdicionarNota(::grpc::ServerContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GerenciadorNotas::Service::AlterarNota(::grpc::ServerContext* context, const ::gerencia_notas::AdicionaNotaRequest* request, ::gerencia_notas::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GerenciadorNotas::Service::ConsultarNota(::grpc::ServerContext* context, const ::gerencia_notas::AlunoDisciplinaRequest* request, ::gerencia_notas::ConsultaNotaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GerenciadorNotas::Service::CalcularMedia(::grpc::ServerContext* context, const ::gerencia_notas::AlunoRequest* request, ::gerencia_notas::MediaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GerenciadorNotas::Service::ListarNotasAluno(::grpc::ServerContext* context, const ::gerencia_notas::AlunoRequest* request, ::grpc::ServerWriter< ::gerencia_notas::Nota>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gerencia_notas

